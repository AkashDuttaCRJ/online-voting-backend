from flask import Flask, request, jsonify
import requests
from decouple import config
from functools import wraps
import jwt
import db

app = Flask(__name__)

# APP CONFIGS:
twofactor_api_key = config('TWOFACTOR_API_KEY')
jwt_secret = config('JWT_SECRET')


# DECORATORS:
def verifyOTP(f=None):
    @wraps(f)
    def _verifyOTP(*args, **kwargs):
        # Testing Values - 
        #   "sessionId": "c05332ac-9eae-4ac5-b0d9-d8e3765b1207"
        #   "otp": "317624"
        if not 'sessionId' in request.json:
            return jsonify({ "error": "SessionID not found in request body!"}), 400
        session_id = request.json['sessionId']
        if not 'otp' in request.json:
            return jsonify({ "error": "OTP not found in request body!"}), 400
        otp_input = request.json['otp']
        twoFactResp = requests.get(f'https://2factor.in/API/V1/{twofactor_api_key}/SMS/VERIFY/{session_id}/{otp_input}').json()
        if twoFactResp['Status'] == 'Error':
            return jsonify(twoFactResp)
        return f(*args, **kwargs)
    return _verifyOTP

def authenticate(f=None):
    @wraps(f)
    def _authenticate(*args, **kwargs):
        # Testing Values - 
        #   "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwaG9uZSI6Ijg5MTA1NTcxMjEifQ.JVWo3TqeaoN481lNxWaZWGNvjsRzZdfxwjbTl2ezXO4"
        if not 'Authorization' in request.headers:
            return jsonify({ "error": "Token missing!"}), 400
        bearer = request.headers['Authorization'].split(' ')[0]
        if not bearer == 'Bearer':
            return jsonify({ "error": "Invalid Authorization Request"}), 400
        token = request.headers['Authorization'].split(' ')[-1]
        try: 
            jwt.decode(token, jwt_secret, algorithms=["HS256"])
        except:
            return jsonify({ "error": "Access Denied or Invalid Authorization Request!" }), 400
        return f(*args, **kwargs)
    return _authenticate

# API ENDPOINTS: 

# Note: DO NOT CALL THIS API ENDPOINT AS THE AMOUNT OF CREDIT IS LIMITED
@app.route("/getotp")
def get_otp():
    if not 'phone' in request.headers:
        return jsonify({ "error": "Phone number not found in request header!"}), 400
    phone_number = request.headers['phone']
    if not phone_number or not len(phone_number) == 10:
        return jsonify({ "error": "The provide phone number is Invalid!"}), 400
    users = db.get_user_by_phoneNumber(phone_number)
    if not 'type' in request.headers:
        return jsonify({ "error": "Request type not found in request header!"}), 400
    type = request.headers['type']
    if type == 'login' and len(users) == 0:
        return jsonify({ "error": "User not found! Sign up Instead "}), 400
    if type == 'signup' and len(users) != 0:
        return jsonify({ "error": "User already exists! Login Instead"}), 400
    # twoFactResp = requests.get(f'https://2factor.in/API/V1/{twofactor_api_key}/SMS/{phone_number}/AUTOGEN').json()
    # return jsonify(twoFactResp)
    return "Success"
    # Expected Success Response -
    # {
    #     "Details": random id generated by uuid v4,
    #     "Status": "Success"
    # }
# ======================================================================

@app.route("/login")
@verifyOTP
def login():
    if not 'phone' in request.headers:
        return jsonify({ "error": "Phone number not found in request header!"}), 400
    phone_number = request.headers['phone']
    payload = {"phone": phone_number}
    encoded_jwt = jwt.encode(payload, jwt_secret)
    return jsonify({ 'token' : encoded_jwt })

@app.route("/signup")
@verifyOTP
def signup():
    if not 'voterId' in request.json:
        return jsonify({ "error": "Invalid request!"}), 400
    if not 'fullName' in request.json:
        return jsonify({ "error": "Invalid request!"}), 400
    if not 'address' in request.json:
        return jsonify({ "error": "Invalid request!"}), 400
    if not 'phoneNumber' in request.json:
        return jsonify({ "error": "Invalid request!"}), 400
    voterId = request.json['voterId']
    checkId = db.get_user_by_voterId(voterId)
    if not len(checkId) == 0:
        return jsonify({ "error": "User already exists! Login Instead" }), 400
    phoneNumber = request.json['phoneNumber']
    fullName = request.json['fullName']
    address = request.json['address']
    data = db.create_user(voterId, fullName, address, phoneNumber)
    return data

@app.route("/")
@authenticate
def home():
    return "Hello World"

if __name__ == "__main__":
    app.run(debug=True)